from loguru import logger

from aiogram import types
from aiogram.utils.callback_data import CallbackData

from app.misc import dp

from app.models.user import User


cb_linking = CallbackData("tgb", "action", "mc_username")


@dp.message_handler(
    commands=["link"]
)
async def command_link(message: types.Message, user: User):
    logger.info(
        "User {user_id} start linking.",
        user_id=message.from_user.id
    )
    reply_to_msg = False
    reply_markup = None

    await message.chat.do("typing")

    # Message in Group
    is_group_chat_msg = not types.ChatType.is_private(message)
    if is_group_chat_msg and message.get_args():
        await message.delete()
        answer_text = (
            f"{message.from_user.get_mention()}, c–ø—Ä–æ–±—É–π –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–µ —Å–∞–º–µ, –∞–ª–µ –≤ —á–∞—Ç—ñ –≥—Ä–∏! üòÇ"
        )

    elif is_group_chat_msg and user.mc_username and not message.reply_to_message:
        answer_text = (
            f"–Ø –∑–Ω–∞—é —Ç–≤—ñ–π –Ω—ñ–∫–Ω–µ–π–º - {user.mc_username}!\n\n"
            "–ê–ª–µ –Ω–∞–≥–∞–¥–∞—é, —â–æ –¥–ª—è –∑–≤'—è–∑—É–≤–∞–Ω–Ω—è Minecraft –∞–∫–∫–∞—É–Ω—Ç—É —Ç–∞ –¢–µ–ª–µ–≥—Ä–∞–º –∞–∫–∞—É–Ω—Ç—É "
            "–Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ –¥—ñ–∞–ª–æ–≥ –∑ –±–æ—Ç–æ–º @nurecraft_bot —Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É –æ—Å–æ–±–∏—Å—Ç–æ."
        )
        reply_to_msg = True

    elif is_group_chat_msg:
        answer_text = (
            "–î–ª—è –∑–≤'—è–∑—É–≤–∞–Ω–Ω—è Minecraft –∞–∫–∫–∞—É–Ω—Ç—É —Ç–∞ –¢–µ–ª–µ–≥—Ä–∞–º –∞–∫–∞—É–Ω—Ç—É "
            "–ø–µ—Ä–µ–π–¥—ñ—Ç—å –≤ –¥—ñ–∞–ª–æ–≥ –∑ –±–æ—Ç–æ–º @nurecraft_bot —Ç–∞ –ø–æ–≤—Ç–æ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É.\n\n"
            "–ê–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É:"
        )
        reply_markup = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton("–í—ñ–¥–∫—Ä–∏—Ç–∏ –±–æ—Ç–∞", url="https://t.me/nurecraft_bot?start=link")
            ]
        ])
        reply_to_msg = True

    # Message in Private chat
    elif user.mc_username:
        answer_text = (
            f"–î–æ —Ç–≤–æ–≥–æ –¢–µ–ª–µ–≥—Ä–∞–º—É –∞–∫–∞—É–Ω—Ç—É –≤–∂–µ –ø—Ä–∏–≤'—è–∑–∞–Ω–æ –Ω—ñ–∫ \"<b>{user.mc_username}</b>\" "
            "—è–∫—â–æ —Ç–∏ —Ö–æ—á–µ—Ç –ø—Ä–∏–≤'—è–∑–∞—Ç–∏ —ñ–Ω—à–∏–π –Ω—ñ–∫, —Ç–æ –≤–∏–ø–æ–≤–Ω–∏ –∫–æ–º–∞–Ω–¥—É –≤ —á–∞—Ç—ñ Minecraft:\n\n"
            f"<pre>/link {message.from_user.id}</pre>"
        )

    else:
       answer_text = (
            "–©–æ–± —è –∑–∞–ø–∞–º'—è—Ç–∞–≤ —Ç–≤—ñ–π –Ω—ñ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ–ø—ñ—é–π —Ç–∞ "
            "–Ω–∞–¥—ñ—à–ª–∏ –Ω–∞—Å—Ç—É–ø–Ω—É –∫–æ–º–∞–Ω–¥—É –≤ —á–∞—Ç—ñ Minecraft:\n\n"
            f"<pre>/link {message.from_user.id}</pre>"
        )

    await message.answer(
        answer_text,
        parse_mode="html",
        disable_web_page_preview=True,
        reply_markup=reply_markup,
        reply=reply_to_msg
    )
    return True


@dp.callback_query_handler(
    lambda cbq: types.ChatType.is_private(cbq.message),
    cb_linking.filter()
)
async def cq_linking(query: types.CallbackQuery, callback_data: dict, user: User):
    logger.info(
        "User {user_id} try to link Minecraft account to Telegram user.",
        user_id=query.from_user.id
    )

    if user.mc_username:
        query_answer_text = "–Ø –ø–∞–º'—è—Ç–∞—é —Ç–≤—ñ–π –Ω—ñ–∫–Ω–µ–π–º."

        new_message_text = (
            f"–¢–≤—ñ–π –Ω—ñ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ –≤–∂–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ - <b>{user.mc_username}</b>!"
        )

    else:
        await user.update(mc_username=callback_data["mc_username"]).apply()

        query_answer_text = "–Ø –∑–∞–ø–∞–º'—è—Ç–∞–≤ —Ç–≤—ñ–π –Ω—ñ–∫–Ω–µ–π–º!"
        new_message_text = (
            f"–Ø –∑–∞–ø–∞–º'—è—Ç–∞–≤, —â–æ —Ç–≤—ñ–π –Ω—ñ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ - <b>{user.mc_username}</b>!"
        )

    await query.answer(query_answer_text)

    await query.message.edit_text(new_message_text, reply_markup=None)
